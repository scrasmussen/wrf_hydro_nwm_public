! Real test fixtures with pFUnit are somewhat involved (see the
! Fixtures directory in this repository).  This file demonstrates a
! simple approach to fixtures that uses module variables.

! One example where this approach is desirable is when the SUT assumes
! that some file already exists.  The test needs to create a file
! before invoking the SUT and then delete it upon completion.  But
! what if an assertion fails before the deletion step?  Here the
! tear_down() procedure is called _after_ the test and therefore
! guarantees the file is deleted even when tests fail.
module example2
  use funit
  implicit none
contains
   ! The following procedure will be called before running
   ! each test in the suite.
   @before
   subroutine set_up()
      integer :: unit
      open(newunit=unit, file='test.txt', form='formatted', status='new', access='sequential')
      write(unit,'(I2)') 1
      write(unit,'(I2)') 7
      close(unit)

   end subroutine set_up


   ! The following procedure will be called after running
   ! each test in the suite.
   @after
   subroutine tear_down()
      integer :: unit
      logical :: exists

      inquire(file='test.txt', number=unit, exist=exists)
      if (unit /= -1) then
         close(unit, status='delete')
      elseif (exists) then
         open(newunit=unit, file='test.txt')
         close(unit, status='delete')
      end if
   end subroutine tear_down


   @test
   subroutine test_1()
      logical :: exists

      inquire(file='test.txt', exist=exists)
      @assertEqual(.true., exists)
   end subroutine test_1


   @test
   subroutine test_2()
      integer :: unit, x, y

      open (newunit=unit, file='test.txt', status='old')
      read(unit, *) x, y
      @assertEqual(7, y)
      close(unit)
   end subroutine test_2
end module example2
