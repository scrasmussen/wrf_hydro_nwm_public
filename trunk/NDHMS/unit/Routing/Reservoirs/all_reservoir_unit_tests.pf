module all_reservoir_unit_tests
  use funit
  ! use module_levelpool_tests
  ! use module_persistence_levelpool_hybrid_tests
  ! use module_rfc_forecasts_tests
  use module_reservoir_unit_tests
  implicit none
contains
  @test
  subroutine run_test_levelpool()
    logical :: res
    res = test_levelpool()
    @assertTrue(res)
  end subroutine run_test_levelpool


  @test
  subroutine run_test_persistence_levelpool_hybrid_usgs()
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_persistence_levelpool_hybrid_usgs(reservoir_testing_files_dir)
    @assertTrue(res, message='test_persistence_levelpool_hybrid_usgs returned False')
  end subroutine run_test_persistence_levelpool_hybrid_usgs

  @test
  subroutine run_test_persistence_levelpool_hybrid_usace()
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_persistence_levelpool_hybrid_usace(reservoir_testing_files_dir)
    @assertTrue(res, message='test_persistence_levelpool_hybrid_usace returned False')
  end subroutine run_test_persistence_levelpool_hybrid_usace

  @test
  subroutine run_test_persistence_levelpool_hybrid_usace_overtop()
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_persistence_levelpool_hybrid_usace_overtop(reservoir_testing_files_dir)
    @assertTrue(res, message='test_persistence_levelpool_hybrid_usace_overtop returned False')
  end subroutine run_test_persistence_levelpool_hybrid_usace_overtop

  @test
  subroutine run_test_persistence_levelpool_hybrid_usace_no_timeslice()
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_persistence_levelpool_hybrid_usace_no_timeslice_available(reservoir_testing_files_dir)
    @assertTrue(res, message='test_persistence_levelpool_hybrid_usace_no_timeslice_available returned False')
  end subroutine run_test_persistence_levelpool_hybrid_usace_no_timeslice


  @test
  subroutine run_test_levelpool_overflow_max_height
    logical :: res
    res = test_levelpool_overflow_max_height()
    @assertTrue(res, message='test_levelpool_overflow_max_height returned False')
  end subroutine run_test_levelpool_overflow_max_height

  @test
  subroutine run_test_rfc_forecasts_object
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_rfc_forecasts_object(reservoir_testing_files_dir)
    @assertTrue(res, message='test_test_rfc_forecasts_object returned False')
  end subroutine run_test_rfc_forecasts_object

  @test
  subroutine run_test_rfc_forecasts_time_series_object
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_rfc_forecasts_time_series_object(reservoir_testing_files_dir)
    @assertTrue(res, message='test_rfc_forecasts_time_series_object returned False')
  end subroutine run_test_rfc_forecasts_time_series_object

  @test
  subroutine run_test_rfc_forecasts_levelpool_fallback
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_rfc_forecasts_levelpool_fallback(reservoir_testing_files_dir)
    @assertTrue(res, message='test_rfc_forecasts_levelpool_fallback returned False')
  end subroutine run_test_rfc_forecasts_levelpool_fallback

  @test
  subroutine run_test_rfc_forecasts_time_series_output_with!_lookback_and_offset
    logical :: res
    character(len=256) ::  reservoir_testing_files_dir
    reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
    res = test_rfc_forecasts_time_series_output_with_lookback_and_offset(reservoir_testing_files_dir)
    @assertTrue(res, message='test_rfc_forecasts_time_series_output_with_lookback_and_offset returned False')
  end subroutine run_test_rfc_forecasts_time_series_output_with!_lookback_and_offset


  @test
  subroutine run_test_rfc_forecasts_time_series_output_all_synthetic!_data
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_rfc_forecasts_time_series_output_all_synthetic_data(reservoir_testing_files_dir)
     @assertTrue(res, message=' returned False')
   end subroutine run_test_rfc_forecasts_time_series_output_all_synthetic!_data

   @test
   subroutine run_test_rfc_forecasts_data_exceeding_max_range
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_rfc_forecasts_data_exceeding_max_range(reservoir_testing_files_dir)
     @assertTrue(res, message='test_rfc_forecasts_data_exceeding_max_range returned False')
   end subroutine run_test_rfc_forecasts_data_exceeding_max_range

   @test
   subroutine run_test_rfc_forecasts_with_offset_extended_AnA
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_rfc_forecasts_with_offset_for_extended_AnA(reservoir_testing_files_dir)
     @assertTrue(res, message='test_rfc_forecasts_with_offset_for_extended_AnA returned False')
   end subroutine run_test_rfc_forecasts_with_offset_extended_AnA

   @test
   subroutine run_test_ak_rfc_forecasts_pass_through_fallback
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_ak_rfc_forecasts_pass_through_fallback(reservoir_testing_files_dir)
     @assertTrue(res, message='test_ak_rfc_forecasts_pass_through_fallback returned False')
   end subroutine run_test_ak_rfc_forecasts_pass_through_fallback

   @test
   subroutine run_test_ak_rfc_forecasts_time_series_with_lookback_and_offset
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_ak_rfc_forecasts_time_series_with_lookback_and_offset(reservoir_testing_files_dir)
     @assertTrue(res, message='test_ak_rfc_forecasts_time_series_with_lookback_and_offset returned False')
   end subroutine run_test_ak_rfc_forecasts_time_series_with_lookback_and_offset

   @test
   subroutine run_test_rfc_forecasts_over_max_water_elevation
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_rfc_forecasts_over_max_water_elevation(reservoir_testing_files_dir)
     @assertTrue(res, message='test_rfc_forecasts_over_max_water_elevation returned False')
   end subroutine run_test_rfc_forecasts_over_max_water_elevation

   @test
   subroutine run_test_rfc_forecasts_with_offset_for_long_range_AnA
     logical :: res
     character(len=256) ::  reservoir_testing_files_dir
     reservoir_testing_files_dir = "../../../../../../tests/local/reservoir_testing_files"
     res = test_rfc_forecasts_with_offset_for_long_range_AnA(reservoir_testing_files_dir)
     @assertTrue(res, message='test_rfc_forecasts_with_offset_for_long_range_AnA returned False')
   end subroutine run_test_rfc_forecasts_with_offset_for_long_range_AnA

end module all_reservoir_unit_tests
