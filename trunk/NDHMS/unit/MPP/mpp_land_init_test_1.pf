module mpp_land_init_test_1
  use funit
  implicit none
contains
  @test
  subroutine test_mpp_land_init_2()
    use module_mpp_land, only : MPP_LAND_INIT
    integer :: in_global_nx, in_global_ny
    in_global_nx = 10
    in_global_ny = 10
    call MPP_LAND_INIT(in_global_nx, in_global_ny)
    @assertTrue(.true.)
  end subroutine test_mpp_land_init_2

  @test
  subroutine test_mpp_land_getNX_NY_1()
    use module_mpp_land, only : getNX_NY
    integer :: nprocs, nx, ny
    nprocs = 1
    nx = 10
    ny = 10
    call getNX_NY(nprocs, nx, ny)
    @mpiAssertEqual(nx, 1)
    @mpiAssertEqual(ny, 1)
  end subroutine test_mpp_land_getNX_NY_1

  @test
  subroutine test_mpp_land_getNX_NY_2()
    use module_mpp_land, only : getNX_NY, global_nx, global_ny
    integer :: nprocs, nx, ny
    global_nx = 10
    global_ny = 10
    nprocs = 10
    call getNX_NY(nprocs, nx, ny)
    @mpiAssertEqual(nx, 5)
    @mpiAssertEqual(ny, 2)
  end subroutine test_mpp_land_getNX_NY_2

  @test
  subroutine test_mpp_land_LOG_MAP2d()
    use module_mpp_land, only : LOG_MAP2d
    use module_mpp_land, only : down_id, up_id, left_id, right_id
    call LOG_MAP2d()
    ! These return -1 if no neighbors
    @mpiAssertEqual(down_id, -1)
    @mpiAssertEqual(up_id, -1)
    @mpiAssertEqual(left_id, -1)
    @mpiAssertEqual(right_id, -1)
  end subroutine test_mpp_land_LOG_MAP2d


  ! @assertTrue(.false.)
  ! @assertExceptionRaised('ARTLESS: THIS SHOULD FAIL')
  ! mpi_initialized
end module mpp_land_init_test_1
